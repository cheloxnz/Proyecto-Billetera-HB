{"ast":null,"code":"var server = require(\"express\").Router();\n\nvar _require = require(\"../db\"),\n    User = _require.User;\n\nvar bcrypt = require(\"bcryptjs\");\n\nserver.post('/register', function (req, res) {\n  var _req$body = req.body,\n      email = _req$body.email,\n      password = _req$body.password,\n      name = _req$body.name,\n      surname = _req$body.surname,\n      role = _req$body.role;\n  {\n    console.log(User);\n  }\n\n  if (!email || !password || !name || !surname) {\n    return res.send('The fields are required');\n  }\n\n  User.findOne({\n    where: {\n      email: email\n    }\n  }).then(function (user) {\n    if (!user) {\n      var salt = bcrypt.genSaltSync(10);\n      var hash = bcrypt.hashSync(password, salt);\n      User.create({\n        email: email,\n        password: hash,\n        name: name,\n        surname: surname,\n        role: role\n      }).then(function (user) {\n        res.send(user);\n      }).catch(function (err) {\n        res.send('An error occurred, the email you are trying to enter is in use, the account could not be created');\n      });\n    }\n  });\n});\nserver.get('/', function (req, res) {\n  User.findAll().then(function (users) {\n    return res.send(users);\n  }).catch(function (err) {\n    return res.send('No user found');\n  });\n});\nserver.get('/:id', function (req, res) {\n  User.findOne({\n    where: {\n      userId: req.params.id\n    }\n  }).then(function (user) {\n    res.send(user).status(200);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n});\nserver.put('/:id', function (req, res) {\n  var id = req.params.id;\n  var _req$body2 = req.body,\n      name = _req$body2.name,\n      surname = _req$body2.surname,\n      password = _req$body2.password,\n      email = _req$body2.email,\n      phone = _req$body2.phone,\n      address = _req$body2.address,\n      locationAddress = _req$body2.locationAddress,\n      province = _req$body2.province,\n      role = _req$body2.role;\n  User.findOne({\n    where: {\n      id: id\n    }\n  }).then(function (users) {\n    if (!users) res.send('User not found');else {\n      var salt = bcrypt.genSaltSync(10);\n      var hash = bcrypt.hashSync(password, salt);\n      users.update({\n        email: email,\n        password: hash,\n        phone: phone,\n        address: address,\n        locationAddress: locationAddress,\n        province: province,\n        role: 'Admin'\n      });\n      res.send(users);\n    }\n  }).catch(function (err) {\n    res.send('Could not update user');\n  });\n});\nserver.delete('/:id', function (req, res) {\n  var id = req.params.id;\n  User.destroy({\n    where: {\n      id: id\n    }\n  }).then(function (user) {\n    if (user) res.send(\"User eliminated\");else res.send(\"User not found\");\n  }).catch(function (err) {\n    return res.send(\"An unexpected error occurred\");\n  });\n});\nserver.post('/resetPassword', function (req, res) {\n  var email = req.body.email;\n  User.findOne({\n    where: {\n      email: email\n    }\n  }).then(function (user) {\n    return res.send(user.dataValues.id.toString());\n  }).catch(function (err) {\n    return res.send(err);\n  });\n});\nserver.put('/:id/resetPassword', function (req, res) {\n  var newPassword = req.body.newPassword;\n  {\n    console.log(newPassword);\n  }\n  var id = req.params.id;\n  User.findByPk(id).then(function (user) {\n    var salt = bcrypt.genSaltSync(10);\n    var newHash = bcrypt.hashSync(newPassword, salt);\n    var name = user.name,\n        surname = user.surname,\n        email = user.email;\n    user.update({\n      name: name,\n      surname: surname,\n      email: email,\n      password: newHash\n    });\n    res.send(\"The password was reset\");\n  }).catch(function (err) {\n    return res.send(err);\n  });\n});\nmodule.exports = server;","map":{"version":3,"sources":["/home/matias/Documentos/Henry/Proyecto-Henry-Bank/api/src/routes/user.js"],"names":["server","require","Router","User","bcrypt","post","req","res","body","email","password","name","surname","role","console","log","send","findOne","where","then","user","salt","genSaltSync","hash","hashSync","create","catch","err","get","findAll","users","userId","params","id","status","put","phone","address","locationAddress","province","update","delete","destroy","dataValues","toString","newPassword","findByPk","newHash","module","exports"],"mappings":"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","sourcesContent":["const server = require(\"express\").Router();\nconst { User } = require('../db');\nconst bcrypt = require(\"bcryptjs\");\n\n\n//----------------------------------------------------------\n//-------------------------USUARIO--------------------------\n//----------------------------------------------------------\n\n//-------------------------------------\n//           RUTA REGISTER            |\n//-------------------------------------\n\nserver.post('/register', (req, res) => {\n    const { email, password, name, surname, role } = req.body\n    { console.log(User) }\n    if (!email || !password || !name || !surname) {\n        return res.send('The fields are required');\n    }\n\n    User.findOne({ where: { email } }).then((user) => {\n        if (!user) {\n            const salt = bcrypt.genSaltSync(10);\n            const hash = bcrypt.hashSync(password, salt);\n            User.create({\n                email: email,\n                password: hash,\n                name: name,\n                surname: surname,\n                role: role\n            }).then((user) => {\n                res.send(user);\n            })\n                .catch((err) => {\n                    res.send('An error occurred, the email you are trying to enter is in use, the account could not be created')\n                })\n        }\n    });\n});\n\n//-------------------------------------\n//                GET ALL USERS       |\n//-------------------------------------\n\nserver.get('/', (req, res) => {\n    User.findAll()\n        .then((users) => res.send(users))\n        .catch((err) => res.send('No user found'));\n});\n\n//-------------------------------------\n//             GET BY ID              |\n//-------------------------------------\n\nserver.get('/:id', (req, res) => {\n    User.findOne({\n        where: {\n            userId: req.params.id\n        }\n    }).then(user => {\n        res.send(user).status(200)\n    }).catch(err => console.log(err))\n})\n\n//-------------------------------------\n//                 PUT                |\n//-------------------------------------\nserver.put('/:id', (req, res) => {\n    const id = req.params.id;\n    let { name, surname, password, email, phone, address, locationAddress, province, role } = req.body;\n    User.findOne({ where: { id: id } })\n        .then((users) => {\n            if (!users) res.send('User not found')\n            else {\n                const salt = bcrypt.genSaltSync(10);\n                const hash = bcrypt.hashSync(password, salt);\n\n                users.update({ email, password: hash, phone, address, locationAddress, province, role: 'Admin' });\n                res.send(users);\n            }\n\n        })\n        .catch((err) => {\n            res.send('Could not update user')\n        })\n})\n\n//-------------------------------------\n//               DELETE               |\n//-------------------------------------\n\nserver.delete('/:id', (req, res) => {\n    const id = req.params.id;\n    User.destroy({\n        where: { id: id },\n    })\n        .then((user) => {\n            if (user) res.send(\"User eliminated\");\n            else res.send(\"User not found\");\n        })\n        .catch((err) => res.send(\"An unexpected error occurred\"));\n})\n\n\n//-------------------------------------\n//      SEARCH EMAIL, RETURN ID       |\n//-------------------------------------\n\nserver.post('/resetPassword', (req, res) => {\n    const { email } = req.body;\n\n    User.findOne({ where: { email } })\n        .then((user) => res.send(user.dataValues.id.toString()))\n        .catch((err) => res.send(err))\n})\n\n//-------------------------------------\n//          RESET PASSWORD            |\n//-------------------------------------\n\nserver.put('/:id/resetPassword', (req, res) => {\n    const { newPassword } = req.body\n    { console.log(newPassword) }\n    const id = req.params.id\n    User.findByPk(id)\n        .then((user) => {\n            var salt = bcrypt.genSaltSync(10);\n            var newHash = bcrypt.hashSync(newPassword, salt);\n            const { name, surname, email } = user;\n            user.update({ name, surname, email, password: newHash });\n            res.send(\"The password was reset\");\n        })\n        .catch((err) => res.send(err))\n})\n\n\n\nmodule.exports = server;"]},"metadata":{},"sourceType":"script"}