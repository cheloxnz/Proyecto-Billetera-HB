{"ast":null,"code":"var _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nrequire('dotenv').config();\n\nvar _require = require('sequelize'),\n    Sequelize = _require.Sequelize;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar _process$env = process.env,\n    DB_USER = _process$env.DB_USER,\n    DB_PASSWORD = _process$env.DB_PASSWORD,\n    DB_HOST = _process$env.DB_HOST;\nvar sequelize = new Sequelize(\"postgres://\" + DB_USER + \":\" + DB_PASSWORD + \"@\" + DB_HOST + \"/henrybank\", {\n  logging: false,\n  native: false\n});\nvar basename = path.basename(__filename);\nvar modelDefiners = [];\nfs.readdirSync(path.join(__dirname, '/models')).filter(function (file) {\n  return file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js';\n}).forEach(function (file) {\n  modelDefiners.push(require(path.join(__dirname, '/models', file)));\n});\nmodelDefiners.forEach(function (model) {\n  return model(sequelize);\n});\nvar entries = Object.entries(sequelize.models);\nvar capsEntries = entries.map(function (entry) {\n  return [entry[0][0].toUpperCase() + entry[0].slice(1), entry[1]];\n});\nsequelize.models = Object.fromEntries(capsEntries);\nvar _sequelize$models = sequelize.models,\n    User = _sequelize$models.User,\n    Account = _sequelize$models.Account,\n    Transaction = _sequelize$models.Transaction;\nUser.hasOne(Account);\nAccount.belongsTo(User);\nUser.belongsToMany(User, {\n  through: 'contacts',\n  as: 'friend'\n});\nAccount.belongsToMany(Account, {\n  through: Transaction,\n  as: 'emisor'\n});\nmodule.exports = _objectSpread(_objectSpread({}, sequelize.models), {}, {\n  conn: sequelize\n});","map":{"version":3,"sources":["/home/matias/Documentos/Henry/Proyecto-Henry-Bank/api/src/db.js"],"names":["require","config","Sequelize","fs","path","process","env","DB_USER","DB_PASSWORD","DB_HOST","sequelize","logging","native","basename","__filename","modelDefiners","readdirSync","join","__dirname","filter","file","indexOf","slice","forEach","push","model","entries","Object","models","capsEntries","map","entry","toUpperCase","fromEntries","User","Account","Transaction","hasOne","belongsTo","belongsToMany","through","as","module","exports","conn"],"mappings":";;;;;;AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;eACoBD,OAAO,CAAC,WAAD,C;IAApBE,S,YAAAA,S;;AACP,IAAMC,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;mBACwCK,OAAO,CAACC,G;IAAzCC,O,gBAAAA,O;IAASC,W,gBAAAA,W;IAAaC,O,gBAAAA,O;AAE7B,IAAMC,SAAS,GAAG,IAAIR,SAAJ,iBAA4BK,OAA5B,SAAuCC,WAAvC,SAAsDC,OAAtD,iBAA2E;AAC5FE,EAAAA,OAAO,EAAE,KADmF;AAE5FC,EAAAA,MAAM,EAAE;AAFoF,CAA3E,CAAlB;AAIA,IAAMC,QAAQ,GAAGT,IAAI,CAACS,QAAL,CAAcC,UAAd,CAAjB;AAEA,IAAMC,aAAa,GAAG,EAAtB;AAGAZ,EAAE,CAACa,WAAH,CAAeZ,IAAI,CAACa,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAAf,EACEC,MADF,CACS,UAAAC,IAAI;AAAA,SAAIA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAtB,IAA2BD,IAAI,KAAKP,QAApC,IAAgDO,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAAvE;AAAA,CADb,EAEEC,OAFF,CAEU,UAAAH,IAAI,EAAI;AAChBL,EAAAA,aAAa,CAACS,IAAd,CAAmBxB,OAAO,CAACI,IAAI,CAACa,IAAL,CAAUC,SAAV,EAAqB,SAArB,EAAgCE,IAAhC,CAAD,CAA1B;AACA,CAJF;AAOAL,aAAa,CAACQ,OAAd,CAAsB,UAAAE,KAAK;AAAA,SAAIA,KAAK,CAACf,SAAD,CAAT;AAAA,CAA3B;AAEA,IAAIgB,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAehB,SAAS,CAACkB,MAAzB,CAAd;AACA,IAAIC,WAAW,GAAGH,OAAO,CAACI,GAAR,CAAY,UAAAC,KAAK;AAAA,SAAI,CAACA,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,EAAYC,WAAZ,KAA4BD,KAAK,CAAC,CAAD,CAAL,CAAST,KAAT,CAAe,CAAf,CAA7B,EAAgDS,KAAK,CAAC,CAAD,CAArD,CAAJ;AAAA,CAAjB,CAAlB;AACArB,SAAS,CAACkB,MAAV,GAAmBD,MAAM,CAACM,WAAP,CAAmBJ,WAAnB,CAAnB;wBAEqCnB,SAAS,CAACkB,M;IAAxCM,I,qBAAAA,I;IAAMC,O,qBAAAA,O;IAASC,W,qBAAAA,W;AAEtBF,IAAI,CAACG,MAAL,CAAYF,OAAZ;AACAA,OAAO,CAACG,SAAR,CAAkBJ,IAAlB;AAEAA,IAAI,CAACK,aAAL,CAAmBL,IAAnB,EAAyB;AAACM,EAAAA,OAAO,EAAC,UAAT;AAAqBC,EAAAA,EAAE,EAAC;AAAxB,CAAzB;AACAN,OAAO,CAACI,aAAR,CAAsBJ,OAAtB,EAA+B;AAACK,EAAAA,OAAO,EAAEJ,WAAV;AAAuBK,EAAAA,EAAE,EAAE;AAA3B,CAA/B;AAGAC,MAAM,CAACC,OAAP,mCACIjC,SAAS,CAACkB,MADd;AAECgB,EAAAA,IAAI,EAAElC;AAFP","sourcesContent":["require('dotenv').config();\nconst {Sequelize} = require('sequelize');\nconst fs = require('fs');\nconst path = require('path');\nconst {DB_USER, DB_PASSWORD, DB_HOST} = process.env;\n\nconst sequelize = new Sequelize(`postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/henrybank`, {\n\tlogging: false, // set to console.log to see the raw SQL queries\n\tnative: false, // lets Sequelize know we can use pg-native for ~30% more speed\n});\nconst basename = path.basename(__filename);\n\nconst modelDefiners = [];\n\n// Leemos todos los archivos de la carpeta Models, los requerimos y agregamos al arreglo modelDefiners\nfs.readdirSync(path.join(__dirname, '/models'))\n\t.filter(file => file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js')\n\t.forEach(file => {\n\t\tmodelDefiners.push(require(path.join(__dirname, '/models', file)));\n\t});\n\n// Injectamos la conexion (sequelize) a todos los modelos\nmodelDefiners.forEach(model => model(sequelize));\n// Capitalizamos los nombres de los modelos ie: product => Product\nlet entries = Object.entries(sequelize.models);\nlet capsEntries = entries.map(entry => [entry[0][0].toUpperCase() + entry[0].slice(1), entry[1]]);\nsequelize.models = Object.fromEntries(capsEntries);\n\nconst {User, Account, Transaction} = sequelize.models\n\nUser.hasOne(Account)\nAccount.belongsTo(User)\n\nUser.belongsToMany(User, {through:'contacts', as:'friend'})\nAccount.belongsToMany(Account, {through: Transaction, as: 'emisor'})\n\n\nmodule.exports = {\n\t...sequelize.models, // para poder importar los modelos así: const { Product, User } = require('./db.js');\n\tconn: sequelize, // para importart la conexión { conn } = require('./db.js');\n};"]},"metadata":{},"sourceType":"script"}