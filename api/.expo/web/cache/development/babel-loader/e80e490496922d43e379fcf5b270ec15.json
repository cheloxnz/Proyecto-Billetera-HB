{"ast":null,"code":"var server = require(\"express\").Router();\n\nvar bcrypt = require(\"bcryptjs\");\n\nvar passport = require(\"passport\");\n\nvar LocalStrategy = require(\"passport-local\").Strategy;\n\nvar codeGenerator = require(\"../utils/index.js\");\n\nvar _require = require(\"../db\"),\n    User = _require.User;\n\nserver.post(\"/register\", function (req, res) {\n  var _req$body = req.body,\n      email = _req$body.email,\n      password = _req$body.password;\n\n  if (!email || !password) {\n    return res.send(\"The fields are required\");\n  }\n\n  User.findOne({\n    where: {\n      email: email\n    }\n  }).then(function (user) {\n    if (!user) {\n      var salt = bcrypt.genSaltSync(10);\n      var hash = bcrypt.hashSync(password, salt);\n      User.create({\n        email: email,\n        password: hash,\n        generatedCode: codeGenerator()\n      }).then(function (user) {\n        res.send(user);\n      }).catch(function (err) {\n        return res.status(400).send(\"The email is in use, try another box\");\n      });\n    } else {\n      res.status(500).send(\"User exists\");\n    }\n  });\n});\nserver.get(\"/\", function (req, res) {\n  User.findAll().then(function (users) {\n    return res.send(users);\n  }).catch(function (err) {\n    return res.send(\"No user found\");\n  });\n});\nserver.get(\"/:id\", function (req, res) {\n  User.findOne({\n    where: {\n      id: req.params.id\n    }\n  }).then(function (user) {\n    res.send(user).status(200);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n});\nserver.get(\"/:email\", function (req, res) {\n  User.findOne({\n    where: {\n      id: req.params.email\n    }\n  }).then(function (user) {\n    res.send(user).status(200);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n});\nserver.put(\"/:id\", function (req, res) {\n  var id = req.params.id;\n  var _req$body2 = req.body,\n      password = _req$body2.password,\n      email = _req$body2.email,\n      phone = _req$body2.phone,\n      address = _req$body2.address,\n      locationAddress = _req$body2.locationAddress,\n      province = _req$body2.province,\n      role = _req$body2.role;\n  User.findOne({\n    where: {\n      id: id\n    }\n  }).then(function (users) {\n    if (!users) res.send(\"User not found\");else {\n      var salt = bcrypt.genSaltSync(10);\n      var hash = bcrypt.hashSync(password, salt);\n      users.update({\n        email: email,\n        password: hash,\n        phone: phone,\n        address: address,\n        locationAddress: locationAddress,\n        province: province,\n        role: role\n      });\n      res.send(users);\n    }\n  }).catch(function (err) {\n    res.send(\"Could not update user\");\n  });\n});\nserver.put('/activeUser/:id', function (req, res) {\n  var id = req.params.id;\n  User.findOne({\n    where: {\n      id: id\n    }\n  }).then(function (user) {\n    if (!user) res.send('User not found');else {\n      user.update({\n        role: \"User\"\n      });\n      res.send(user);\n    }\n  }).catch(function (err) {\n    res.send('Could not update user');\n  });\n});\nserver.delete(\"/:id\", function (req, res) {\n  var id = req.params.id;\n  User.destroy({\n    where: {\n      id: id\n    }\n  }).then(function (user) {\n    if (user) res.send(\"User eliminated\");else res.send(\"User not found\");\n  }).catch(function (err) {\n    return res.send(\"An unexpected error occurred\");\n  });\n});\nserver.post(\"/resetPassword\", function (req, res) {\n  var email = req.body.email;\n  User.findOne({\n    where: {\n      email: email\n    }\n  }).then(function (user) {\n    return res.send(user.dataValues.id.toString());\n  }).catch(function (err) {\n    return res.send(err);\n  });\n});\nserver.put(\"/:id/resetPassword\", function (req, res) {\n  var newPassword = req.body.newPassword;\n  {\n    console.log(newPassword);\n  }\n  var id = req.params.id;\n  User.findByPk(id).then(function (user) {\n    var salt = bcrypt.genSaltSync(10);\n    var newHash = bcrypt.hashSync(newPassword, salt);\n    var name = user.name,\n        surname = user.surname,\n        email = user.email;\n    user.update({\n      name: name,\n      surname: surname,\n      email: email,\n      password: newHash\n    });\n    res.send(\"The password was reset\");\n  }).catch(function (err) {\n    return res.send(err);\n  });\n});\nserver.post(\"/login\", passport.authenticate(\"local\", {\n  failureRedirect: \"/login\"\n}), function (req, res) {\n  res.send(req.user);\n});\nserver.get(\"/logout\", function (req, res) {\n  req.logout();\n  res.send(\"logout\");\n});\nserver.post(\"/updatePin\", function (req, res) {\n  var _req$body3 = req.body,\n      id = _req$body3.id,\n      pin = _req$body3.pin;\n  User.findOne({\n    where: {\n      id: id\n    }\n  }).then(function (user) {\n    if (user) {\n      user.update({\n        pin: pin\n      });\n      res.send(\"User updated!\");\n    } else {\n      res.sendStatus(\"User not found!\");\n    }\n  });\n});\nmodule.exports = server;","map":{"version":3,"sources":["/home/matias/Documentos/Henry/Proyecto-Henry-Bank/api/src/routes/user.js"],"names":["server","require","Router","bcrypt","passport","LocalStrategy","Strategy","codeGenerator","User","post","req","res","body","email","password","send","findOne","where","then","user","salt","genSaltSync","hash","hashSync","create","generatedCode","catch","err","status","get","findAll","users","id","params","console","log","put","phone","address","locationAddress","province","role","update","delete","destroy","dataValues","toString","newPassword","findByPk","newHash","name","surname","authenticate","failureRedirect","logout","pin","sendStatus","module","exports"],"mappings":"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","sourcesContent":["const server = require(\"express\").Router();\nconst bcrypt = require(\"bcryptjs\");\nconst passport = require(\"passport\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\nconst codeGenerator = require(\"../utils/index.js\");\nconst { User } = require(\"../db\");\n\n//----------------------------------------------------------\n//-------------------------USUARIO--------------------------\n//----------------------------------------------------------\n\n//-------------------------------------\n//           ROUTE REGISTER           |\n//-------------------------------------\n\nserver.post(\"/register\", (req, res) => {\n  const { email, password } = req.body;\n\n  if (!email || !password) {\n    return res.send(\"The fields are required\");\n  }\n\n  User.findOne({ where: { email } }).then((user) => {\n    if (!user) {\n      const salt = bcrypt.genSaltSync(10);\n      const hash = bcrypt.hashSync(password, salt);\n      User.create({\n        //Crea el registro de usuario y le graba los valores\n        email: email,\n        password: hash,\n        generatedCode: codeGenerator()\n      })\n        .then((user) => {\n          res.send(user);\n        })\n        .catch((err) => res.status(400).send(\"The email is in use, try another box\"));\n    } else {\n      res.status(500).send(\"User exists\");\n    }\n  });\n});\n\n//-------------------------------------\n//                GET ALL USERS       |\n//-------------------------------------\n\nserver.get(\"/\", (req, res) => {\n  User.findAll()\n    .then((users) => res.send(users))\n    .catch((err) => res.send(\"No user found\"));\n});\n\n//-------------------------------------\n//             GET BY ID              |\n//-------------------------------------\n\nserver.get(\"/:id\", (req, res) => {\n  User.findOne({\n    where: {\n      id: req.params.id,\n    },\n  })\n    .then((user) => {\n      res.send(user).status(200);\n    })\n    .catch((err) => console.log(err));\n});\n\n//-------------------------------------\n//             GET BY EMAIL           |\n//-------------------------------------\n\nserver.get(\"/:email\", (req, res) => {\n  User.findOne({\n    where: {\n      id: req.params.email,\n    },\n  })\n    .then((user) => {\n      res.send(user).status(200);\n    })\n    .catch((err) => console.log(err));\n});\n\n//-------------------------------------\n//                 PUT                |\n//-------------------------------------\nserver.put(\"/:id\", (req, res) => {\n  const id = req.params.id;\n  let {\n    password,\n    email,\n    phone,\n    address,\n    locationAddress,\n    province,\n    role,\n  } = req.body;\n  User.findOne({ where: { id: id } })\n    .then((users) => {\n      if (!users) res.send(\"User not found\");\n      else {\n        const salt = bcrypt.genSaltSync(10);\n        const hash = bcrypt.hashSync(password, salt);\n        users.update({\n          email,\n          password: hash,\n          phone,\n          address,\n          locationAddress,\n          province,\n          role,\n        });\n        res.send(users);\n      }\n    })\n    .catch((err) => {\n      res.send(\"Could not update user\");\n    });\n});\n\nserver.put('/activeUser/:id', (req, res) => {\n    const id = req.params.id;\n    User.findOne({ where: { id } })\n        .then((user) => {\n            if (!user) res.send('User not found')\n                else {\n                user.update( {role: \"User\"} );\n                res.send(user);\n            }\n        })\n        .catch((err) => {\n            res.send('Could not update user')\n        })\n})\n\n\n\n\n\n//-------------------------------------\n//               DELETE USER          |\n//-------------------------------------\n\nserver.delete(\"/:id\", (req, res) => {\n  const id = req.params.id;\n  User.destroy({\n    where: { id: id },\n  })\n    .then((user) => {\n      if (user) res.send(\"User eliminated\");\n      else res.send(\"User not found\");\n    })\n    .catch((err) => res.send(\"An unexpected error occurred\"));\n});\n\n//-------------------------------------\n//      SEARCH EMAIL, RETURN ID       |\n//-------------------------------------\n\nserver.post(\"/resetPassword\", (req, res) => {\n  const { email } = req.body;\n\n  User.findOne({ where: { email } })\n    .then((user) => res.send(user.dataValues.id.toString()))\n    .catch((err) => res.send(err));\n});\n\n//-------------------------------------\n//          RESET PASSWORD            |\n//-------------------------------------\n\nserver.put(\"/:id/resetPassword\", (req, res) => {\n  const { newPassword } = req.body;\n  {\n    console.log(newPassword);\n  }\n  const id = req.params.id;\n  User.findByPk(id)\n    .then((user) => {\n      var salt = bcrypt.genSaltSync(10);\n      var newHash = bcrypt.hashSync(newPassword, salt);\n      const { name, surname, email } = user;\n      user.update({ name, surname, email, password: newHash });\n      res.send(\"The password was reset\");\n    })\n    .catch((err) => res.send(err));\n});\n\n//-------------------------------------\n//            LOGIN                   |\n//-------------------------------------\n\nserver.post(\n  \"/login\",\n  passport.authenticate(\"local\", { failureRedirect: \"/login\" }),\n  function (req, res) {\n    res.send(req.user);\n  }\n);\n\n//-------------------------------------\n//            LOGOUT                   |\n//-------------------------------------\n\nserver.get(\"/logout\", (req, res) => {\n  req.logout();\n  res.send(\"logout\");\n});\n\n\n//--------------------------------------\n//              PUT PIN                |\n//--------------------------------------\n\nserver.post(\"/updatePin\", (req, res) => {\n  const { id, pin } = req.body;\n  User.findOne({\n    where: {\n      id: id\n    }\n  }).then(user => {\n      if (user) {\n        user.update({pin: pin})\n        res.send(\"User updated!\")\n      } else {\n        res.sendStatus(\"User not found!\")\n      }\n  });\n});\n\nmodule.exports = server;\n"]},"metadata":{},"sourceType":"script"}